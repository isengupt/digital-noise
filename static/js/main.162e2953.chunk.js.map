{"version":3,"sources":["shadermaterial.js","shaders/vertex.js","shaders/fragment.js","Text.js","img/Img4.jpg","img/Img5.jpg","img/displacement/10.jpg","ImageFadeMaterial.js","FadingImage.js","store.js","img/img3.jpg","img/img6.jpg","shaders1/fragment1.js","shaders1/vertex.js","img/img2.jpg","img/disp3.jpg","img/text.png","Basic.js","shadermaterial3.js","shadermaterial2.js","Basic2.js","shadermaterial1.js","shaders1/fragment2.js","Basic3.js","img/img1.jpg","components/CustomMaterial.js","blocks.js","components/Plane.js","ico/img/img1.jpg","ico/material.js","shaders/ico/fragment.js","shaders/ico/vertex.js","ico/material1.js","shaders/ico/fragment1.js","shaders/ico/vertex1.js","ico/postprocessing.js","ico/Ico.js","NoisePlane.js","index.js"],"names":["shaderMaterial","uniforms","time","type","value","lineWidth","rotation","repeat","resolution","THREE","uvRate1","extensions","derivatives","side","vertexShader","fragmentShader","Math","PI","Text","mouseTarget","children","vAlign","hAlign","props","size","color","font","useLoader","config","useMemo","height","curveSegments","bevelEnabled","useFrame","clock","mesh","current","material","elapsedTime","y","x","useUpdate","self","geometry","computeBoundingBox","boundingBox","getSize","position","scale","translate","ref","attach","args","ImageFadeMaterial","effectFactor","dispFactor","tex","undefined","tex2","disp","extend","FadingImage","useRef","img1","img2","texture1","texture2","dispTexture","useState","setHover","viewport","useThree","sin","onPointerMove","e","onPointerOut","width","state","sections","pages","zoom","paragraphs","offset","factor","header","image","aspect","text","top","createRef","fragment1","vertex","Square","progress","mouse","load","displacement","CustomMaterial","ShaderMaterial","constructor","super","hasTexture","shift","opacity","Color","this","offsetContext","createContext","Block","useBlock","parentOffset","sectionHeight","curY","curTop","lerp","Provider","useContext","viewportWidth","viewportHeight","canvasWidth","canvasHeight","mobile","margin","contentMaxWidth","offsetFactor","Plane","forwardRef","map","last","transparent","t","wrapS","wrapT","landscape","material1","PostProcessing","tDiffuse","rgbshift","pixelSize","Effect","composer","scene","gl","camera","useEffect","setSize","render","attachArray","EffectComposer","RenderPass","ShaderPass","length","attributes","array","bary","i","push","aBary","Float32Array","Outline","attachObject","Ico","planeRef","z","NoisePlane","Startup","Paragraph","index","w","alignRight","pixelWidth","left","Html","style","textAlign","tabIndex","Basic","Content","mouseMoved","images","TextureLoader","forEach","texture","minFilter","LinearFilter","Basic2","Basic3","className","App","scrollArea","onScroll","target","scrollTop","pageX","window","innerWidth","pageY","innerHeight","href","onMouseMove","colorManagement","orthographic","fallback","center","Array","fill","_","id","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.162e2953.chunk.js","sourcesContent":["import * as THREE from \"three\";\nimport { fragment } from \"./shaders/fragment\";\nimport { vertex } from \"./shaders/vertex\";\n\nconst shaderMaterial = {\n  uniforms: {\n    time: { type: \"f\", value: 0 },\n    lineWidth: { type: \"f\", value: 0 },\n    rotation: { type: \"f\", value: 0 },\n    repeat: { type: \"f\", value: 0 },\n    resolution: { type: \"v4\", value: new THREE.Vector4() },\n    uvRate1: {\n      value: new THREE.Vector2(1, 1),\n    },\n  },\n  extensions: {\n    derivatives: \"#extension GL_OES_standard_derivatives : enable\",\n  },\n  side: THREE.DoubleSide,\n  vertexShader: vertex,\n  fragmentShader: fragment,\n};\n\nexport default shaderMaterial;\n","export var vertex = `\nattribute vec3 color;\nvarying vec2 vUv;\nvarying vec3 vPosition;\n\n  void main() {\n    vUv = uv;\n\n    vPosition = position;\n\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position,1.0);\n}\n`;\n","export var fragment = `\n\nuniform float time;\nuniform float rotation;\nuniform float repeat;\nuniform float lineWidth;\nuniform float progress;\nuniform sampler2D texture1;\nuniform vec4 resolution;\nvarying vec2 vUv;\nvarying vec3 vPosition;\nfloat PI = 3.141592653589793238;\n\nfloat aastep(float threshold, float value) {\n  #ifdef GL_OES_standard_derivatives\n    float afwidth = length(vec2(dFdx(value), dFdy(value))) * 0.70710678118654757;\n    return smoothstep(threshold-afwidth, threshold+afwidth, value);\n  #else\n    return step(threshold, value);\n  #endif  \n}\n\nfloat line(vec2 uv, float width) {\n  float u = 0.;\nif (uv.x < 0.01) {\n  u = 0.;\n} else if (uv.x > 1.-0.01) {\n  u = 0.;\n} else {\n  u = aastep(width, uv.x) - aastep(1. - width, uv.x );\n}\n\n  \n  return u;\n}\n\nvec2 rotate(vec2 v, float a) {\n\tfloat s = sin(a);\n\tfloat c = cos(a);\n\tmat2 m = mat2(c, -s, s, c);\n\treturn m * v;\n}\n\n//\tClassic Perlin 3D Noise \n//\tby Stefan Gustavson\n//\nvec4 permute(vec4 x){return mod(((x*34.0)+1.0)*x, 289.0);}\nvec4 taylorInvSqrt(vec4 r){return 1.79284291400159 - 0.85373472095314 * r;}\nvec3 fade(vec3 t) {return t*t*t*(t*(t*6.0-15.0)+10.0);}\n\nfloat cnoise(vec3 P){\n  vec3 Pi0 = floor(P); // Integer part for indexing\n  vec3 Pi1 = Pi0 + vec3(1.0); // Integer part + 1\n  Pi0 = mod(Pi0, 289.0);\n  Pi1 = mod(Pi1, 289.0);\n  vec3 Pf0 = fract(P); // Fractional part for interpolation\n  vec3 Pf1 = Pf0 - vec3(1.0); // Fractional part - 1.0\n  vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);\n  vec4 iy = vec4(Pi0.yy, Pi1.yy);\n  vec4 iz0 = Pi0.zzzz;\n  vec4 iz1 = Pi1.zzzz;\n\n  vec4 ixy = permute(permute(ix) + iy);\n  vec4 ixy0 = permute(ixy + iz0);\n  vec4 ixy1 = permute(ixy + iz1);\n\n  vec4 gx0 = ixy0 / 7.0;\n  vec4 gy0 = fract(floor(gx0) / 7.0) - 0.5;\n  gx0 = fract(gx0);\n  vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);\n  vec4 sz0 = step(gz0, vec4(0.0));\n  gx0 -= sz0 * (step(0.0, gx0) - 0.5);\n  gy0 -= sz0 * (step(0.0, gy0) - 0.5);\n\n  vec4 gx1 = ixy1 / 7.0;\n  vec4 gy1 = fract(floor(gx1) / 7.0) - 0.5;\n  gx1 = fract(gx1);\n  vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);\n  vec4 sz1 = step(gz1, vec4(0.0));\n  gx1 -= sz1 * (step(0.0, gx1) - 0.5);\n  gy1 -= sz1 * (step(0.0, gy1) - 0.5);\n\n  vec3 g000 = vec3(gx0.x,gy0.x,gz0.x);\n  vec3 g100 = vec3(gx0.y,gy0.y,gz0.y);\n  vec3 g010 = vec3(gx0.z,gy0.z,gz0.z);\n  vec3 g110 = vec3(gx0.w,gy0.w,gz0.w);\n  vec3 g001 = vec3(gx1.x,gy1.x,gz1.x);\n  vec3 g101 = vec3(gx1.y,gy1.y,gz1.y);\n  vec3 g011 = vec3(gx1.z,gy1.z,gz1.z);\n  vec3 g111 = vec3(gx1.w,gy1.w,gz1.w);\n\n  vec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));\n  g000 *= norm0.x;\n  g010 *= norm0.y;\n  g100 *= norm0.z;\n  g110 *= norm0.w;\n  vec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));\n  g001 *= norm1.x;\n  g011 *= norm1.y;\n  g101 *= norm1.z;\n  g111 *= norm1.w;\n\n  float n000 = dot(g000, Pf0);\n  float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));\n  float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));\n  float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));\n  float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));\n  float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));\n  float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));\n  float n111 = dot(g111, Pf1);\n\n  vec3 fade_xyz = fade(Pf0);\n  vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);\n  vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);\n  float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x); \n  return 2.2 * n_xyz;\n}\nvoid main(){\n\n  //vec2 newUV = gl_FragCoord.xy / resolution.xy;\n\n\n  vec2 newUV = vPosition.xy;\n  newUV = rotate(newUV,rotation);\n  float noise = cnoise(vec3(newUV + time / 40. + vPosition.z /10.,time/100.));\n  newUV += vec2(noise);\n  newUV = vec2(fract((newUV.x )*repeat),newUV.y);\n\n\n\n  \n    gl_FragColor = vec4(vec3(line(newUV, lineWidth)),1.);\n   // gl_FragColor = vec4(vPosition,1.);\n  \n\n}\n`;\n","import * as THREE from 'three'\nimport React, { useMemo } from 'react'\nimport { useLoader, useUpdate, useFrame } from 'react-three-fiber'\nimport shaderMaterial from './shadermaterial'\nlet rotation = Math.PI / 4;\nlet lineWidth = 0.4;\nlet repeat = 10;\nexport default function Text({ \n  \n  mouseTarget,\n  children, vAlign = 'center', hAlign = 'center', size = 1, color = '#000000', ...props }) {\n  const font = useLoader(THREE.FontLoader, '/bold.blob')\n  const config = useMemo(\n    () => ({ font, \n      size: 1.3,\n      height: 0.2,\n      curveSegments: 12,\n      bevelEnabled: false,\n    }),\n    [font]\n  )\n\n  useFrame(({ clock }) => {\n    mesh.current.material.uniforms.time.value = clock.elapsedTime \n    mesh.current.material.uniforms.rotation.value = rotation;\n    mesh.current.material.uniforms.lineWidth.value = lineWidth;\n    mesh.current.material.uniforms.repeat.value = repeat;\n    mesh.current.rotation.y = -mouseTarget.current.x / 4\n    mesh.current.rotation.x = mouseTarget.current.y / 4\n  })\n\n  const mesh = useUpdate(\n    (self) => {\n      const size = new THREE.Vector3()\n      self.geometry.computeBoundingBox()\n      self.geometry.boundingBox.getSize(size)\n      self.position.x = hAlign === 'center' ? -size.x / 2 : hAlign === 'right' ? 0 : -size.x\n      self.position.y = vAlign === 'center' ? -size.y / 2 : vAlign === 'top' ? 0 : -size.y\n    },\n    [children]\n  )\n  return (\n    <group {...props} scale={[1,1,1]}\n       translate={[-1.5,-0.5,-0.2]}\n    >\n      <mesh ref={mesh}>\n        <textBufferGeometry attach=\"geometry\" \n        translate={[-1.5,-0.5,-0.2]}\n        args={[children, config]} />\n        <shaderMaterial attach=\"material\" args={[shaderMaterial]} />\n      </mesh>\n    </group>\n  )\n}\n","export default __webpack_public_path__ + \"static/media/Img4.ae8ebf5a.jpg\";","export default __webpack_public_path__ + \"static/media/Img5.00a85aaf.jpg\";","export default __webpack_public_path__ + \"static/media/10.97f5f239.jpg\";","import { extend } from \"react-three-fiber\"\nimport { shaderMaterial } from \"drei\"\n\nconst ImageFadeMaterial = shaderMaterial(\n  {\n    effectFactor: 1.2,\n    dispFactor: 0,\n    tex: undefined,\n    tex2: undefined,\n    disp: undefined\n  },\n  `varying vec2 vUv;\n  void main() {\n    vUv = uv;\n    gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n  }`,\n  `varying vec2 vUv;\n  uniform sampler2D tex;\n  uniform sampler2D tex2;\n  uniform sampler2D disp;\n  uniform float _rot;\n  uniform float dispFactor;\n  uniform float effectFactor;\n  void main() {\n    vec2 uv = vUv;\n    vec4 disp = texture2D(disp, uv);\n    vec2 distortedPosition = vec2(uv.x, uv.y + dispFactor * (disp.r*effectFactor));\n    vec2 distortedPosition2 = vec2(uv.x, uv.y - (1.0 - dispFactor) * (disp.r*effectFactor));\n    vec4 _texture = texture2D(tex, distortedPosition);\n    vec4 _texture2 = texture2D(tex2, distortedPosition2);\n    vec4 finalTexture = mix(_texture, _texture2, dispFactor);\n    gl_FragColor = finalTexture;\n  }`\n)\n\nextend({ ImageFadeMaterial })\n","import * as THREE from \"three\"\nimport React, { Suspense, useRef, useState } from \"react\"\nimport { Canvas, useFrame, useLoader, useThree } from \"react-three-fiber\"\nimport img1 from \"./img/Img4.jpg\"\nimport img2 from \"./img/Img5.jpg\"\nimport disp from \"./img/displacement/10.jpg\"\nimport \"./ImageFadeMaterial\"\n\nfunction FadingImage() {\n  const ref = useRef()\n  const [texture1, texture2, dispTexture] = useLoader(THREE.TextureLoader, [img1, img2, disp])\n  const [hovered, setHover] = useState(false)\n  const {viewport} = useThree()\n\n  useFrame(({ clock }) => {\n   \n    ref.current.dispFactor = Math.sin(clock.elapsedTime/6);\n  });\n  //useFrame(() => (ref.current.dispFactor = THREE.MathUtils.lerp(ref.current.dispFactor, hovered ? 1 : 0, 0.1)))\n  return (\n    <mesh\n    \n    \n     onPointerMove={(e) => setHover(true)} onPointerOut={(e) => setHover(false)} scale={[1, 1, 1]}>\n      <planeBufferGeometry attach=\"geometry\" args={[viewport.width - 1 , viewport.height -1 , 1,1]} />\n      <imageFadeMaterial ref={ref} attach=\"material\" tex={texture1} tex2={texture2} disp={dispTexture} />\n    </mesh>\n  )\n}\n\nexport default FadingImage;","import { createRef } from \"react\"\nimport { Vector3 } from \"three\"\nimport img1 from \"./img/img3.jpg\";\nimport img2 from \"./img/img6.jpg\";\nimport img3 from \"./img/img3.jpg\";\nconst state = {\n  sections: 4,\n  pages: 4,\n  zoom: 75,\n  paragraphs: [\n    {\n      offset: 1.1,\n      factor: 1.0,\n      header: \"Millenium Project\",\n      image: img1,\n      aspect: 3,\n      text: \"Contrary to popular belief, Lorem Ipsum is not simply random text. It has roots in a piece of classical Latin literature from 45 BC, making it over 2000 years old.\"\n    },\n    {\n      offset: 2,\n      factor: 1.1,\n      header: \"Diamond Road\",\n      image: img2,\n      aspect: 3,\n      text:\n        \"There are many variations of passages of Lorem Ipsum available, but the majority have suffered alteration in some form, by injected humour, or randomised words which don't look even slightly believable.\"\n    },\n  \n    \n  ],\n\n  top: createRef()\n}\n\nexport default state\n","export default __webpack_public_path__ + \"static/media/img3.e3979111.jpg\";","export default __webpack_public_path__ + \"static/media/img6.49023073.jpg\";","export var fragment1 = `\n\nuniform float time;\nuniform float progress;\nuniform sampler2D texture1;\nuniform sampler2D image;\nuniform sampler2D displacement;\nuniform vec4 resolution;\n\nvarying vec2 vUv;\nvarying vec3 vPosition;\nfloat PI = 3.141592653589793238;\nvoid main(){\n\n  vec4 displace = texture2D(displacement, vUv);\n\n  vec2 displacedUV = vec2(vUv.x + 0.1*sin(vUv.y*19. + time/4.), vUv.y);\n  vec4 color = texture2D(image, displacedUV);\n  \n\n  \n  gl_FragColor = color;\n  \n\n}\n`;\n","export var vertex = `\nattribute vec3 color;\nvarying vec3 vPosition;\nvarying vec2 vUv;\n\n  void main() {\n    vUv = uv;\n\n\n    vPosition = position;\n\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position,1.0);\n}\n`;\n","export default __webpack_public_path__ + \"static/media/img2.cf8260ac.jpg\";","export default __webpack_public_path__ + \"static/media/disp3.80f08c53.jpg\";","export default __webpack_public_path__ + \"static/media/text.57e51cf4.png\";","import React, { useRef } from 'react'\nimport { useFrame, useThree } from 'react-three-fiber'\n\nimport * as THREE from \"three\";\nimport { fragment1 } from \"./shaders1/fragment1\";\nimport { vertex } from \"./shaders1/vertex\";\nimport img1 from \"./img/img2.jpg\";\nimport img2 from \"./img/img2.jpg\";\nimport img3 from \"./img/img3.jpg\";\nimport disp from \"./img/disp3.jpg\";\nimport text from \"./img/text.png\";\n\n\n\n\nfunction Square(props) {\n  // This reference will give us direct access to the mesh\n  const mesh = useRef()\n  // Rotate mesh every frame, this is outside of React without overhead\n  useFrame(({ clock }) => {\n    mesh.current.material.uniforms.time.value = clock.elapsedTime\n    mesh.current.material.uniforms.progress.value = Math.sin(clock.elapsedTime / 2);\n  })\n\n  const {viewport} = useThree()\n\n  return (\n    <mesh {...props} ref={mesh}>\n      <planeGeometry attach=\"geometry\" args={[4,3, 1,1]}>\n       \n      </planeGeometry>\n      <shaderMaterial attach=\"material\" args={[\n\n{\n  extensions: {\n    derivatives: \"#extension GL_OES_standard_derivatives : enable\",\n  },\n  side: THREE.DoubleSide,\n  uniforms: {\n    time: { type: \"f\", value: 0 },\n    progress: { type: \"f\", value: 0 },\n    mouse: {type: 'v3', value: new THREE.Vector3()},\n    image: { type: \"t\", value: new THREE.TextureLoader().load(props.image) },\n    \n    displacement: {\n      type: \"t\",\n      value: new THREE.TextureLoader().load(disp),\n    },\n    resolution: { type: \"v4\", value: new THREE.Vector4() },\n    uvRate1: {\n      value: new THREE.Vector2(1, 1),\n    },\n  },\n  vertexShader: vertex,\n  fragmentShader: fragment1,\n}\n      ]} />\n    </mesh>\n  )\n}\n\nexport default Square\n","import * as THREE from \"three\";\nimport { fragment } from \"./shaders1/fragment\";\nimport { vertex } from \"./shaders1/vertex\";\nimport img1 from \"./img/img2.jpg\";\nimport img2 from \"./img/img2.jpg\";\nimport img3 from \"./img/img3.jpg\";\nimport disp from \"./img/disp3.jpg\";\nimport text from \"./img/text.png\";\nconst shaderMaterial = {\n  extensions: {\n    derivatives: \"#extension GL_OES_standard_derivatives : enable\",\n  },\n  side: THREE.DoubleSide,\n  uniforms: {\n    time: { type: \"f\", value: 0 },\n    progress: { type: \"f\", value: 0 },\n    mouse: {type: 'f', value: new THREE.Vector3()},\n    image: { type: \"t\", value: new THREE.TextureLoader().load(img1) },\n    text: { type: \"t\", value: new THREE.TextureLoader().load(text) },\n    displacement: {\n      type: \"t\",\n      value: new THREE.TextureLoader().load(disp),\n    },\n    resolution: { type: \"v4\", value: new THREE.Vector4() },\n    uvRate1: {\n      value: new THREE.Vector2(1, 1),\n    },\n  },\n  vertexShader: vertex,\n  fragmentShader: fragment,\n};\n\nexport default shaderMaterial;\n","import * as THREE from \"three\";\nimport { fragment1 } from \"./shaders1/fragment1\";\nimport { vertex } from \"./shaders1/vertex\";\nimport img1 from \"./img/img2.jpg\";\nimport img2 from \"./img/img2.jpg\";\nimport img3 from \"./img/img3.jpg\";\nimport disp from \"./img/disp3.jpg\";\nimport text from \"./img/text.png\";\nconst shaderMaterial = {\n  extensions: {\n    derivatives: \"#extension GL_OES_standard_derivatives : enable\",\n  },\n  side: THREE.DoubleSide,\n  uniforms: {\n    time: { type: \"f\", value: 0 },\n    progress: { type: \"f\", value: 0 },\n    mouse: {type: 'v3', value: new THREE.Vector3()},\n    image: { type: \"t\", value: new THREE.TextureLoader().load(img1) },\n    text: { type: \"t\", value: new THREE.TextureLoader().load(text) },\n    displacement: {\n      type: \"t\",\n      value: new THREE.TextureLoader().load(disp),\n    },\n    resolution: { type: \"v4\", value: new THREE.Vector4() },\n    uvRate1: {\n      value: new THREE.Vector2(1, 1),\n    },\n  },\n  vertexShader: vertex,\n  fragmentShader: fragment1,\n};\n\nexport default shaderMaterial;\n","import React, { useRef } from 'react'\nimport { useFrame, useThree } from 'react-three-fiber'\n\nimport shaderMaterial from './shadermaterial2'\nimport * as THREE from \"three\"\nimport { fragment1 } from \"./shaders1/fragment1\";\nimport { vertex } from \"./shaders1/vertex\";\nimport img1 from \"./img/img2.jpg\";\nimport img2 from \"./img/img2.jpg\";\nimport img3 from \"./img/img3.jpg\";\nimport disp from \"./img/disp3.jpg\";\nimport text from \"./img/text.png\";\n\nfunction Square(props) {\n  // This reference will give us direct access to the mesh\n  const mesh = useRef()\n  // Rotate mesh every frame, this is outside of React without overhead\n  useFrame(({ clock }) => {\n    mesh.current.material.uniforms.time.value = clock.elapsedTime\n    mesh.current.material.uniforms.progress.value = Math.sin(clock.elapsedTime / 2);\n  })\n\n  const {viewport} = useThree()\n\n  return (\n    <mesh {...props} ref={mesh}>\n      <planeGeometry attach=\"geometry\" args={[viewport.width -1, viewport.height - 1, 1,1]}>\n       \n      </planeGeometry>\n      <shaderMaterial attach=\"material\" args={[\n{\n  extensions: {\n    derivatives: \"#extension GL_OES_standard_derivatives : enable\",\n  },\n  side: THREE.DoubleSide,\n  uniforms: {\n    time: { type: \"f\", value: 0 },\n    progress: { type: \"f\", value: 0 },\n    mouse: {type: 'v3', value: new THREE.Vector3()},\n    image: { type: \"t\", value: new THREE.TextureLoader().load(props.image) },\n    text: { type: \"t\", value: new THREE.TextureLoader().load(text) },\n    displacement: {\n      type: \"t\",\n      value: new THREE.TextureLoader().load(disp),\n    },\n    resolution: { type: \"v4\", value: new THREE.Vector4() },\n    uvRate1: {\n      value: new THREE.Vector2(1, 1),\n    },\n  },\n  vertexShader: vertex,\n  fragmentShader: fragment1,\n}\n\n\n      ]} />\n    </mesh>\n  )\n}\n\nexport default Square\n","import * as THREE from \"three\";\nimport { fragment2 } from \"./shaders1/fragment2\";\nimport { vertex } from \"./shaders1/vertex\";\nimport img1 from \"./img/img2.jpg\";\nimport img2 from \"./img/img2.jpg\";\nimport img3 from \"./img/img3.jpg\";\nimport disp from \"./img/disp3.jpg\";\nimport text from \"./img/text.png\";\nconst shaderMaterial = {\n  extensions: {\n    derivatives: \"#extension GL_OES_standard_derivatives : enable\",\n  },\n  side: THREE.DoubleSide,\n  uniforms: {\n    time: { type: \"f\", value: 0 },\n    progress: { type: \"f\", value: 0 },\n    mouse: {type: 'v3', value: new THREE.Vector3()},\n    image: { type: \"t\", value: new THREE.TextureLoader().load(img1) },\n    text: { type: \"t\", value: new THREE.TextureLoader().load(text) },\n    displacement: {\n      type: \"t\",\n      value: new THREE.TextureLoader().load(disp),\n    },\n    resolution: { type: \"v4\", value: new THREE.Vector4() },\n    uvRate1: {\n      value: new THREE.Vector2(1, 1),\n    },\n  },\n  vertexShader: vertex,\n  fragmentShader: fragment2,\n};\n\nexport default shaderMaterial;\n","export var fragment2 = `\n\nuniform float time;\nuniform float progress;\nuniform sampler2D texture1;\nuniform sampler2D image;\nuniform sampler2D displacement;\nuniform vec4 resolution;\n\nvarying vec2 vUv;\nvarying vec3 vPosition;\nfloat PI = 3.141592653589793238;\nvoid main(){\n\n  vec4 displace = texture2D(displacement, vUv.yx);\n\n  vec2 displacedUV = vec2(\n    vUv.x , \n    vUv.y ) ;\n\n\n\n    displacedUV.y = mix(vUv.y, displace.r, progress);\n\n\n\n  vec4 color = texture2D(image, displacedUV);\n\n  color.r = texture2D(image, displacedUV + vec2(0.,10.* 0.005)*progress).r;\n  color.g = texture2D(image, displacedUV + vec2(0.,10.* 0.01)*progress).g;\n  color.b = texture2D(image, displacedUV + vec2(0.,10.* 0.02)*progress).b;\n  \n\n  \n  gl_FragColor = color;\n  \n\n}\n`;\n","import React, { useRef } from 'react'\nimport { useFrame, useThree } from 'react-three-fiber'\n\nimport shaderMaterial from './shadermaterial1'\n\n\n\nfunction Square(props) {\n  // This reference will give us direct access to the mesh\n  const mesh = useRef()\n  // Rotate mesh every frame, this is outside of React without overhead\n  useFrame(({ clock }) => {\n    mesh.current.material.uniforms.time.value = clock.elapsedTime\n    mesh.current.material.uniforms.progress.value = Math.sin(clock.elapsedTime / 2);\n  })\n\n  const {viewport} = useThree()\n\n  return (\n    <mesh {...props} ref={mesh}>\n      <planeGeometry attach=\"geometry\" args={[viewport.width -1, viewport.height - 1, 1,1]}>\n       \n      </planeGeometry>\n      <shaderMaterial attach=\"material\" args={[shaderMaterial]} />\n    </mesh>\n  )\n}\n\nexport default Square\n","export default __webpack_public_path__ + \"static/media/img1.04e4da82.jpg\";","import { ShaderMaterial, Color } from \"three\"\nimport { extend } from \"react-three-fiber\"\n\nclass CustomMaterial extends ShaderMaterial {\n  constructor() {\n    super({\n      vertexShader: `uniform float scale;\n      uniform float shift;\n      varying vec2 vUv;\n      void main() {\n        vec3 pos = position;\n        pos.y = pos.y + ((sin(uv.x * 3.1415926535897932384626433832795) * shift * 2.0) * 0.125);\n        vUv = uv;\n        gl_Position = projectionMatrix * modelViewMatrix * vec4(pos,1.);\n      }`,\n      fragmentShader: `uniform sampler2D tex;\n      uniform float hasTexture;\n      uniform float shift;\n      uniform float scale;\n      uniform vec3 color;\n      uniform float opacity;\n      varying vec2 vUv;\n      void main() {\n        float angle = 1.55;\n        vec2 p = (vUv - vec2(0.5, 0.5)) * (1.0 - scale) + vec2(0.5, 0.5);\n        vec2 offset = shift / 4.0 * vec2(cos(angle), sin(angle));\n        vec4 cr = texture2D(tex, p + offset);\n        vec4 cga = texture2D(tex, p);\n        vec4 cb = texture2D(tex, p - offset);\n        if (hasTexture == 1.0) gl_FragColor = vec4(cr.r, cga.g, cb.b, cga.a);\n        else gl_FragColor = vec4(color, opacity);\n      }`,\n      uniforms: {\n        tex: { value: null },\n        hasTexture: { value: 0 },\n        scale: { value: 0 },\n        shift: { value: 0 },\n        opacity: { value: 1 },\n        color: { value: new Color(\"white\") }\n      }\n    })\n  }\n\n  set scale(value) {\n    this.uniforms.scale.value = value\n  }\n\n  get scale() {\n    return this.uniforms.scale.value\n  }\n\n  set shift(value) {\n    this.uniforms.shift.value = value\n  }\n\n  get shift() {\n    return this.uniforms.shift.value\n  }\n\n  set map(value) {\n    this.uniforms.hasTexture.value = !!value\n    this.uniforms.tex.value = value\n  }\n\n  get map() {\n    return this.uniforms.tex.value\n  }\n\n  get color() {\n    return this.uniforms.color.value\n  }\n\n  get opacity() {\n    return this.uniforms.opacity.value\n  }\n\n  set opacity(value) {\n    if (this.uniforms) this.uniforms.opacity.value = value\n  }\n}\n\nextend({ CustomMaterial })\n","import React, { createContext, useRef, useContext } from \"react\"\nimport { useFrame, useThree } from \"react-three-fiber\"\nimport lerp from \"lerp\"\nimport state from \"./store\"\n\nconst offsetContext = createContext(0)\n\nfunction Block({ children, offset, factor, ...props }) {\n  const { offset: parentOffset, sectionHeight } = useBlock()\n  const ref = useRef()\n  offset = offset !== undefined ? offset : parentOffset\n  useFrame(() => {\n    const curY = ref.current.position.y\n    const curTop = state.top.current\n    ref.current.position.y = lerp(curY, (curTop / state.zoom) * factor, 0.1)\n  })\n  return (\n    <offsetContext.Provider value={offset}>\n      <group {...props} position={[0, -sectionHeight * offset * factor, 0]}>\n        <group ref={ref}>{children}</group>\n      </group>\n    </offsetContext.Provider>\n  )\n}\n\nfunction useBlock() {\n  const { sections, pages, zoom } = state\n  const { size, viewport } = useThree()\n  const offset = useContext(offsetContext)\n  const viewportWidth = viewport.width * zoom\n  const viewportHeight = viewport.height * zoom\n  const canvasWidth = viewportWidth / zoom\n  const canvasHeight = viewportHeight / zoom\n  const mobile = size.width < 700\n  const margin = canvasWidth * (mobile ? 0.2 : 0.1)\n  const contentMaxWidth = canvasWidth * (mobile ? 0.8 : 0.6)\n  const sectionHeight = canvasHeight * ((pages - 1) / (sections - 1))\n  const offsetFactor = (offset + 1.0) / sections\n  return {\n    viewport,\n    offset,\n    viewportWidth,\n    viewportHeight,\n    canvasWidth,\n    canvasHeight,\n    mobile,\n    margin,\n    contentMaxWidth,\n    sectionHeight,\n    offsetFactor\n  }\n}\n\nexport { Block, useBlock }\n","import React, { forwardRef, useRef } from \"react\"\nimport { useFrame } from \"react-three-fiber\"\nimport lerp from \"lerp\"\nimport \"./CustomMaterial\"\nimport { useBlock } from \"../blocks\"\nimport state from \"../store\"\n\nconst Plane = forwardRef(({ color = \"white\", shift = 1, opacity = 1, args, map, ...props }, ref) => {\n  const { viewportHeight, offsetFactor } = useBlock()\n  const material = useRef()\n  let last = state.top.current\n  useFrame(() => {\n    const { pages, top } = state\n    material.current.scale = lerp(material.current.scale, offsetFactor - top.current / ((pages - 1) * viewportHeight), 0.1)\n    material.current.shift = lerp(material.current.shift, (top.current - last) / shift, 0.1)\n    last = top.current\n  })\n  return (\n    <mesh ref={ref} {...props}>\n      <planeBufferGeometry args={args} />\n      <customMaterial ref={material} color={color} map={map} transparent opacity={opacity} />\n    </mesh>\n  )\n})\n\nexport default Plane\n","export default __webpack_public_path__ + \"static/media/img1.1dd98fec.jpg\";","import { fragment } from \"../shaders/ico/fragment\";\nimport { vertex } from \"../shaders/ico/vertex\";\nimport * as THREE from \"three\";\nimport img1 from \"./img/img1.jpg\";\nlet t = new THREE.TextureLoader().load(img1)\n\nt.wrapS = t.wrapT = THREE.MirroredRepeatWrapping;\nconst material = {\n  fragmentShader: fragment,\n  vertexShader: vertex,\n  extensions: {\n    derivatives: \"#extension GL_OES_standard_derivatives: enable\",\n  },\n  uniforms: {\n    time: { type: \"f\", value: 0 },\n    uvRate1: {\n      value: new THREE.Vector2(1,1)\n    },\n    resolution: {type: 'v4', value: new THREE.Vector4()},\n    landscape: {value:  t }\n  },\n  //wireframe: true,\n\n};\n\nexport default material;\n","export var fragment = `\n//precision highp float;\nuniform float time;\nuniform float progress;\nuniform sampler2D landscape;\nuniform vec4 resolution;\nvarying vec2 vUv;\nvarying vec3 vNormal;\nvarying vec3 eyeVector;\nvarying vec3 vBary;\nfloat PI = 3.141592653589793238;\n\nvec2 hash22(vec2 p) {\n  p = fract(p * vec2(5.3983, 5.4427));\n  p += dot(p.yx, p.xy + vec2(21.5351, 14.3137));\n\n  return fract(vec2(p.x * p.y * 95.4337, p.x * p.y * 97.597));\n}\n  void main() {\n\n    vec3 X = dFdx(vNormal);\n    vec3 Y = dFdy(vNormal);\n    vec3 normal = normalize(cross(X,Y));\n    float diffuse = dot(normal, vec3(1.));\n    vec2 rand = hash22(vec2(floor(diffuse*10.)));\nvec2 uuv = vec2(\n  sign(rand.x-0.5)*1. + (rand.x -0.5)*0.3,\n  sign(rand.y -0.5)*1. + (rand.y-0.5)*0.3\n  \n  );\nfloat fresnel = abs(1. + dot(eyeVector, normal));\nvec2 uv =  uuv *gl_FragCoord.xy / vec2(1000.);\n\n\n    vec3 refracted = refract(eyeVector,normal, 1./3.);\n    uv += 0.2 * refracted.xy;\n\n\n\n\n    vec4 t = texture2D(landscape, uv);\n\n    \n    //gl_FragColor = vec4(vUv.x, vUv.y, 0, 1.0);\n\n\n  gl_FragColor = t*(1. - fresnel);\n  //gl_FragColor = vec4(vBary,1.);\n\n  //gl_FragColor = vec4(vec3(fresnel),1.);\n  }\n`;","export var vertex = `\nuniform float time;\nvarying vec2 vUv;\nvarying vec3 vNormal;\nvarying vec3 eyeVector;\nattribute vec3 aBary;\nvarying vec3 vBary;\nfloat PI = 3.141592653589793238;\n\n//\tSimplex 3D Noise \n//\tby Ian McEwan, Ashima Arts\n//\nvec4 permute(vec4 x){return mod(((x*34.0)+1.0)*x, 289.0);}\nvec4 taylorInvSqrt(vec4 r){return 1.79284291400159 - 0.85373472095314 * r;}\n\nfloat snoise(vec3 v){ \n  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\n  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n\n// First corner\n  vec3 i  = floor(v + dot(v, C.yyy) );\n  vec3 x0 =   v - i + dot(i, C.xxx) ;\n\n// Other corners\n  vec3 g = step(x0.yzx, x0.xyz);\n  vec3 l = 1.0 - g;\n  vec3 i1 = min( g.xyz, l.zxy );\n  vec3 i2 = max( g.xyz, l.zxy );\n\n  //  x0 = x0 - 0. + 0.0 * C \n  vec3 x1 = x0 - i1 + 1.0 * C.xxx;\n  vec3 x2 = x0 - i2 + 2.0 * C.xxx;\n  vec3 x3 = x0 - 1. + 3.0 * C.xxx;\n\n// Permutations\n  i = mod(i, 289.0 ); \n  vec4 p = permute( permute( permute( \n             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n           + i.y + vec4(0.0, i1.y, i2.y, 1.0 )) \n           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n\n// Gradients\n// ( N*N points uniformly over a square, mapped onto an octahedron.)\n  float n_ = 1.0/7.0; // N=7\n  vec3  ns = n_ * D.wyz - D.xzx;\n\n  vec4 j = p - 49.0 * floor(p * ns.z *ns.z);  //  mod(p,N*N)\n\n  vec4 x_ = floor(j * ns.z);\n  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n\n  vec4 x = x_ *ns.x + ns.yyyy;\n  vec4 y = y_ *ns.x + ns.yyyy;\n  vec4 h = 1.0 - abs(x) - abs(y);\n\n  vec4 b0 = vec4( x.xy, y.xy );\n  vec4 b1 = vec4( x.zw, y.zw );\n\n  vec4 s0 = floor(b0)*2.0 + 1.0;\n  vec4 s1 = floor(b1)*2.0 + 1.0;\n  vec4 sh = -step(h, vec4(0.0));\n\n  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n\n  vec3 p0 = vec3(a0.xy,h.x);\n  vec3 p1 = vec3(a0.zw,h.y);\n  vec3 p2 = vec3(a1.xy,h.z);\n  vec3 p3 = vec3(a1.zw,h.w);\n\n//Normalise gradients\n  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n  p0 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n\n// Mix final noise value\n  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n  m = m * m;\n  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1), \n                                dot(p2,x2), dot(p3,x3) ) );\n}\nvoid main() {\n  vUv = uv;\n  vBary = aBary;\n  vNormal = normalize(normalMatrix*normal);\n  float noisy = snoise(vNormal);\nvec3 newPosition = position + noisy*normal;\n  vec4 worldPosition = modelMatrix  * vec4(newPosition, 1.0);\n  eyeVector = normalize(worldPosition.xyz - cameraPosition);\n  //vec3 newPosition = position + vec3( sin((time + uv.x + uv.y) * 10.0) * 0.2,cos((time + uv.x + uv.y) * 10.0) *0.2,0);\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position,1.0);\n}\n`","import { fragment1 } from \"../shaders/ico/fragment1\";\nimport { vertex1 } from \"../shaders/ico/vertex1\";\nimport * as THREE from \"three\";\nimport img1 from \"./img/img1.jpg\";\nlet t = new THREE.TextureLoader().load(img1)\n\nt.wrapS = t.wrapT = THREE.MirroredRepeatWrapping;\nconst material1 = {\n  fragmentShader: fragment1,\n  vertexShader: vertex1,\n  extensions: {\n    derivatives: \"#extension GL_OES_standard_derivatives: enable\",\n  },\n  uniforms: {\n    time: { type: \"f\", value: 0 },\n    uvRate1: {\n      value: new THREE.Vector2(1,1)\n    },\n    resolution: {type: 'v4', value: new THREE.Vector4()},\n    landscape: {value:  t }\n  },\n  //wireframe: true,\n\n};\n\nexport default material1;\n","export var fragment1 = `\n//precision highp float;\nuniform float time;\nuniform float progress;\nuniform sampler2D landscape;\nuniform vec4 resolution;\nvarying vec2 vUv;\nvarying vec3 vNormal;\nvarying vec3 eyeVector;\nvarying vec3 vBary;\nfloat PI = 3.141592653589793238;\n\nvec2 hash22(vec2 p) {\n  p = fract(p * vec2(5.3983, 5.4427));\n  p += dot(p.yx, p.xy + vec2(21.5351, 14.3137));\n\n  return fract(vec2(p.x * p.y * 95.4337, p.x * p.y * 97.597));\n}\n  void main() {\n\n    float width = 1.0;\n    vec3 d = fwidth(vBary);\n    vec3 s = smoothstep(d*(width + 0.5), d* (width - 0.5), vBary);\n\nfloat line = max(s.x, max(s.y,s.z));\nif(line < 0.1) discard;\n  gl_FragColor = vec4(mix(vec3(1.),vec3(0.), 1. - line) ,1.);\n  }\n`;","export var vertex1 = `\nuniform float time;\nvarying vec2 vUv;\nvarying vec3 vNormal;\nvarying vec3 eyeVector;\nattribute vec3 aBary;\nvarying vec3 vBary;\nfloat PI = 3.141592653589793238;\nvoid main() {\n  vUv = uv;\n  vBary = aBary;\n  vNormal = normalize(normalMatrix*normal);\nvec3 newPosition = position;\n  vec4 worldPosition = modelMatrix  * vec4(newPosition, 1.0);\n  eyeVector = normalize(worldPosition.xyz - cameraPosition);\n  //vec3 newPosition = position + vec3( sin((time + uv.x + uv.y) * 10.0) * 0.2,cos((time + uv.x + uv.y) * 10.0) *0.2,0);\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position,1.0);\n}\n`","var PostProcessing = {\n  uniforms: {\n\ttDiffuse: { value: null },\n\trgbshift: {value: 0.3},\n    resolution: { value: null },\n\tpixelSize: { value: 1 },\n\ttime: { value: 0 },\n  },\n\n  vertexShader: `\n\n\t\tvarying highp vec2 vUv;\n\n\t\tvoid main() {\n\n\t\tvUv = uv;\n\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n\t\t}`,\n\n  fragmentShader: `\n\n\t\tuniform sampler2D tDiffuse;\n\t\tuniform float pixelSize;\n\t\tuniform vec2 resolution;\nuniform float time;\nuniform float rgbshift;\n\t\tvarying highp vec2 vUv;\n\t\t\n\n\t\tfloat hash(vec2 p) { \n\t\t\treturn fract(1e4 * sin(17.0 * p.x + p.y * 0.1) * (0.1 + abs(sin(p.y * 13.0 + p.x)))); \n\t\t}\n\n\t\tvoid main(){\n\t\t\t\n\t\t\tvec2 shift = vec2(0.01,0.01)\n\t\t\t*rgbshift\n\t\t\t;\n\t\t\tvec4 t = texture2D(tDiffuse, vUv);\n\t\t\tvec4 t1 = texture2D(tDiffuse, vUv+shift);\n\t\t\tvec4 t2 = texture2D(tDiffuse, vUv-shift);\n\t\t\tvec3 color = vec3((t.r + t.b + t.g)/3.);\n\t\t\tvec3 color1 = vec3((t1.r + t1.b + t1.g)/3.);\n\t\t\tvec3 color2 = vec3((t2.r + t2.b + t2.g)/3.);\n\t\t\t\n\n\t\t\tcolor = vec3(color1.r, color.g, color2.b);\n\t\t\tfloat val = hash(vUv+ time)*0.3;\n\t\t\tvec2 dxy = pixelSize / resolution;\n\t\t\tvec2 coord = dxy * floor( vUv / dxy );\n\t\t\tgl_FragColor = texture2D(tDiffuse, vUv);\n\t\t\tgl_FragColor = vec4(color * rgbshift, 1.);\n\t\t\t\n\t\t}`,\n};\n\nexport { PostProcessing };\n","import React, { useRef, useEffect, useMemo } from \"react\";\nimport { useFrame, extend, useThree } from \"react-three-fiber\";\nimport * as THREE from \"three\";\nimport material from \"./material\";\nimport material1 from \"./material1\";\nimport { EffectComposer } from \"three/examples/jsm/postprocessing/EffectComposer\";\nimport { RenderPass } from \"three/examples/jsm/postprocessing/RenderPass\";\nimport { ShaderPass } from \"three/examples/jsm/postprocessing/ShaderPass\";\nimport { PostProcessing } from \"./postprocessing\";\n\nextend({ EffectComposer, RenderPass, ShaderPass });\n\nexport function Effect(props) {\n  const composer = useRef();\n  const mesh = useRef();\n  const { scene, gl, size, camera } = useThree();\n  const aspect = useMemo(() => new THREE.Vector2(size.width, size.height), []);\n  useEffect(() => void composer.current.setSize(size.width, size.height), [\n    size,\n  ]);\n\n  useFrame(({ clock }) => {\n\n    mesh.current.material.uniforms.time.value = clock.elapsedTime;\n  });\n  useFrame(() => composer.current.render(), 1);\n  return (\n    <effectComposer ref={composer} args={[gl]}>\n      <renderPass attachArray=\"passes\" scene={scene} camera={camera} />\n      <shaderPass\n      ref={mesh}\n       attachArray=\"passes\" args={[PostProcessing]} />\n    </effectComposer>\n  );\n}\n\nlet geometry1 = new THREE.IcosahedronBufferGeometry(1, 1);\nlet length = geometry1.attributes.position.array.length;\nlet bary = [];\n\nfor (let i = 0; i < length / 3; i++) {\n  bary.push(0, 0, 1, 0, 1, 0, 1, 0, 0);\n}\nlet aBary = new Float32Array(bary);\nexport function Outline(props) {\n  const mesh = useRef();\n\n  useFrame(({ clock }) => {\n    mesh.current.rotation.x = clock.elapsedTime / 10;\n    mesh.current.rotation.y = clock.elapsedTime / 10;\n    mesh.current.material.uniforms.time.value = clock.elapsedTime;\n  });\n  return (\n    <mesh {...props} ref={mesh}>\n      <icosahedronBufferGeometry attach=\"geometry\" args={[2.001, 2]}>\n        <bufferAttribute\n          attachObject={[\"attributes\", \"aBary\"]}\n          args={[aBary, 3]}\n        />\n\n        {/* <bufferAttribute attachObject={['attributes', 'count']} args={[count, 1]} /> */}\n      </icosahedronBufferGeometry>\n      <shaderMaterial attach=\"material\" args={[material1]} />\n    </mesh>\n  );\n}\n\nfunction Ico(props) {\n  // This reference will give us direct access to the mesh\n  const mesh = useRef();\n  // Rotate mesh every frame, this is outside of React without overhead\n  useFrame(({ clock }) => {\n    mesh.current.rotation.x = clock.elapsedTime / 10;\n    mesh.current.rotation.y = clock.elapsedTime / 10;\n    //mesh.current.position.x = Math.sin(clock.elapsedTime / 10)\n    mesh.current.material.uniforms.time.value = clock.elapsedTime;\n  });\n\n  return (\n    <mesh {...props} ref={mesh}>\n      <icosahedronGeometry attach=\"geometry\" args={[2, 2]}>\n        {/* <bufferAttribute attachObject={['attributes', 'count']} args={[count, 1]} /> */}\n      </icosahedronGeometry>\n      <shaderMaterial attach=\"material\" args={[material]} />\n    </mesh>\n  );\n}\n\nexport default Ico;\n","import React, { Suspense, useRef, useMemo } from \"react\";\n\nimport { useLoader, useUpdate, useFrame, useThree } from 'react-three-fiber'\n\nimport * as THREE from \"three\";\n\nimport shaderMaterial from \"./shadermaterial\";\n\n\nlet rotation = Math.PI / 4;\nlet lineWidth = 0.4;\nlet repeat = 10;\n\n\nfunction Text({\n  children,\n  mouseTarget,\n  vAlign = \"center\",\n  hAlign = \"center\",\n  size = 1,\n  color = \"#000000\",\n  ...props\n}) {\n  const font = useLoader(THREE.FontLoader, \"/bold.blob\");\n  const config = useMemo(\n    () => ({\n      font,\n      size: 1.5,\n      height: 0.2,\n      curveSegments: 12,\n      bevelEnabled: false,\n    }),\n    [font]\n  );\n\n  const planeRef = useRef();\n  const {viewport} = useThree()\n\n  useFrame(({ clock }) => {\n    let time = clock.elapsedTime;\n    //mesh.current.material.uniforms.time.value = time;\n    planeRef.current.material.uniforms.time.value = time;\n    //mesh.current.material.uniforms.rotation.value = rotation;\n    //mesh.current.material.uniforms.lineWidth.value = lineWidth;\n    //mesh.current.material.uniforms.repeat.value = repeat;\n    //mesh.current.rotation.y = mouseTarget.current.x / 8\n    //mesh.current.rotation.x = mouseTarget.current.y / 8\n    planeRef.current.position.z = -1.2\n    planeRef.current.material.uniforms.rotation.value = rotation;\n    planeRef.current.material.uniforms.lineWidth.value = lineWidth;\n    planeRef.current.material.uniforms.repeat.value = repeat;\n  });\n\n  const mesh = useUpdate(\n    (self) => {\n      const size = new THREE.Vector3();\n      self.geometry.computeBoundingBox();\n      self.geometry.boundingBox.getSize(size);\n      self.position.x =\n        hAlign === \"center\" ? -size.x / 2 : hAlign === \"right\" ? 0 : -size.x;\n      self.position.y =\n        vAlign === \"center\" ? -size.y / 2 : vAlign === \"top\" ? 0 : -size.y;\n    },\n    [children]\n  );\n  return (\n    <group {...props} scale={[1, 1, 1]} >\n    {/*   <mesh ref={mesh}\n    \n      >\n        <textBufferGeometry\n          attach=\"geometry\"\n \n          args={[children, config]}\n        />\n        <shaderMaterial attach=\"material\" args={[shaderMaterial]} />\n      </mesh> */}\n      <mesh ref={planeRef}\n\n      >\n      <planeGeometry attach=\"geometry\" args={[viewport.width -1, viewport.height - 1, 1, 1]}></planeGeometry>\n      <shaderMaterial attach=\"material\" args={[shaderMaterial]} />\n    </mesh>\n    </group>\n  );\n}\n\n\n\n\n\nexport default function NoisePlane(props) {\n  const ref = useRef();\n \n\n  return (\n\n      <Text hAlign=\"center\" mouseTarget={props.mouseTarget} position={[0, 0, 1]} children=\"MOKSHA\" />\n     \n\n  );\n}","import ReactDOM from \"react-dom\"\nimport React, { Suspense, useEffect, useRef, useMemo } from \"react\"\nimport { Canvas, useLoader, useFrame, useThree } from \"react-three-fiber\"\nimport { Html } from \"drei\"\nimport { TextureLoader, LinearFilter } from \"three\"\nimport lerp from \"lerp\"\nimport NoiseText from \"./Text\"\nimport FadingImage from './FadingImage'\nimport { Text, MultilineText } from \"./components/Text\"\nimport Basic from \"./Basic\"\nimport Basic1 from \"./Basic1\"\nimport Basic2 from \"./Basic2\"\nimport Basic3 from \"./Basic3\"\nimport img1 from \"./img/img1.jpg\";\nimport img2 from \"./img/img2.jpg\";\nimport Plane from \"./components/Plane\"\n\nimport Ico, { Outline, Effect } from \"./ico/Ico\"\n\nimport { Block, useBlock } from \"./blocks\"\nimport state from \"./store\"\nimport \"./styles.css\"\n\nimport NoisePlane from \"./NoisePlane\"\n\nfunction Startup() {\n  const ref = useRef()\n  useFrame(() => (ref.current.material.opacity = lerp(ref.current.material.opacity, 0, 0.025)))\n  return <Plane ref={ref} color=\"#0e0e0f\" position={[0, 0, 200]} scale={[100, 100, 1]} />\n}\n\nfunction Paragraph({ image, index, offset, factor, header, aspect, text }) {\n  const { contentMaxWidth: w, canvasWidth, margin, mobile } = useBlock()\n  const size = aspect < 1 && !mobile ? 0.65 : 1\n  const alignRight = (canvasWidth - w * size - margin) / 2\n  const pixelWidth = w * state.zoom * size\n  const left = !(index % 2)\n  const color = index % 2 ? \"#D40749\" : \"#2FE8C3\"\n  return (\n    <Block factor={factor} offset={offset}>\n      <group position={[left ? -alignRight : alignRight, 0, 0]}>\n        <Html\n          style={{ width: pixelWidth / (mobile ? 1 : 2), textAlign: left ? \"left\" : \"right\" }}\n          position={[left || mobile ? (-w * size) / 2 : 0, (-w * size) / 2 / aspect - 0.4, 1]}>\n          <div tabIndex={index}>{text}</div>\n        </Html>\n\n        <Basic position={[left ? -alignRight : alignRight, 0, 0]} image={image}/>\n      </group>\n    </Block>\n  )\n}\n\nfunction Content({ mouseTarget, mouseMoved, mouse }) {\n  const images = useLoader(\n    TextureLoader,\n    state.paragraphs.map(({ image }) => image)\n  )\n\n  useMemo(() => images.forEach((texture) => (texture.minFilter = LinearFilter)), [images])\n  const { contentMaxWidth: w, canvasWidth, canvasHeight, mobile } = useBlock()\n  return (\n    <>\n      <Block factor={1} offset={0}>\n        <Block factor={1.2}>\n          <NoisePlane mouseTarget={mouseTarget} />\n        </Block>\n        <Block factor={-2}>\n          <NoiseText hAlign=\"center\" position={[0, 0, 1]} children=\"WELCOME\" mouseTarget={mouseTarget} />\n        </Block>\n      </Block>\n      <Block factor={-1.1} offset={1.0}>\n        <Basic2 image={img1} />\n      </Block>\n\n      <Block factor={-1.1} offset={2.0}>\n        <Basic3 image={img2} />\n      </Block>\n      {state.paragraphs.map((props, index) => (\n        <Paragraph key={index} index={index} {...props} image={props.image} />\n      ))}\n\n      <Block factor={1.0} offset={3.0}>\n      <FadingImage />\n      </Block>\n\n      <Block factor={1.25} offset={3.0}>\n        <Ico position={[0, 0, 0]} />\n        <Effect />\n        <Outline position={[0, 0, 0]} />\n        <Html className=\"bottom-left\" position={[-canvasWidth / 2, -canvasHeight / 2, 0]}>\n        It is a long established fact that a reader \n        </Html>\n      </Block>\n    </>\n  )\n}\n\nfunction App() {\n  //const [mouseTarget, setMouseTarget] = React.useState({ x: 0, y: 0 })\n  //const [mouse, setMouse] = React.useState({ x: 0, y: 0 })\n\n  const mouse = useRef({ x: 0, y: 0 })\n  const mouseTarget = useRef({ x: 0, y: 0 })\n  const scrollArea = useRef()\n  var frustumSize = 3\n  const onScroll = (e) => (state.top.current = e.target.scrollTop)\n  useEffect(() => void onScroll({ target: scrollArea.current }), [])\n\n  /* function mouseMoved(e) {\n    //console.log('movde')\n    //mouse.current ={ x: 2 * (e.pageX / window.innerWidth - 0.5), y: 2 * (e.pageY / window.innerHeight - 0.5) }\n\n    //mouseTarget.current =  { x: mouseTarget.current.x - 0.1 * (mouseTarget.current.x - mouse.current.x), y: mouseTarget.current.y - 0.1 * (mouseTarget.current.y - mouse.current.y) }\n  } */\n  function mouseMoved(e) {\n    //console.log('movde')\n    mouse.current.x = 2 * (e.pageX / window.innerWidth - 0.5)\n    mouse.current.y = 2 * (e.pageY / window.innerHeight - 0.5)\n    // setMouse({ x: 2 * (e.pageX / window.innerWidth - 0.5), y: 2 * (e.pageY / window.innerHeight - 0.5) })\n    mouseTarget.current.x = mouseTarget.current.x - 0.1 * (mouseTarget.current.x - mouse.current.x)\n    mouseTarget.current.y = mouseTarget.current.y - 0.1 * (mouseTarget.current.y - mouse.current.y)\n\n    // setMouseTarget((e) => ({ x: e.x - 0.1 * (e.x - mouse.current.x), y: e.y - 0.1 * (e.y - mouse.current.y) }))\n  }\n  return (\n    <>\n      <div className=\"frame\">\n        <h1 className=\"frame__title\">AUDIO VISUALIZATION</h1>\n        <div className=\"frame__links\"></div>\n        <div className=\"frame__nav\">\n          <a\n            className=\"frame__link\"\n            href=\"https://isengupt.github.io/fiber-website/\"\n          >\n            Previous\n          </a>\n          <a className=\"frame__link\" href=\"#\">\n            Resume\n          </a>\n          <a\n            className=\"frame__link\"\n            href=\"https://github.com/isengupt/digital-noise/\"\n          >\n            GitHub\n          </a>\n        </div>\n      </div>\n    <div className=\"container\" onMouseMove={(e) => mouseMoved(e)}>\n    \n      <Canvas colorManagement={false} orthographic camera={{ zoom: state.zoom, position: [0, 0, 500] }}>\n        <Suspense fallback={<Html center className=\"loading\" children=\"Loading...\" />}>\n          <Content mouseMoved={mouseMoved} mouseTarget={mouseTarget} mouse={mouse} />\n\n          <Startup />\n       \n        </Suspense>\n      </Canvas>\n      <div className=\"scrollArea\" ref={scrollArea} onScroll={onScroll}>\n        {new Array(state.sections).fill().map((_, index) => (\n          <div key={index} id={\"0\" + index} style={{ height: `${(state.pages / state.sections) * 100}vh` }} />\n        ))}\n      </div>\n    </div>\n    </>\n  )\n}\n\nReactDOM.render(<App />, document.getElementById(\"root\"))\n"],"sourceRoot":""}